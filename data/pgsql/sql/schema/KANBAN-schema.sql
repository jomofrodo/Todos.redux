-- SQL Manager for PostgreSQL 5.2.0.3-- ----------------------------------------- Host      : localhost-- Database  : kanbandev-- Version   : PostgreSQL 9.3.2, compiled by Visual C++ build 1600, 64-bitabort;begin transaction;-- commit;DROP SCHEMA todos;DROP SCHEMA kanban;CREATE SCHEMA todos AUTHORIZATION kanban;CREATE SCHEMA kanban AUTHORIZATION kanban;ALTER DATABASE kanbandev SET search_path TO kanban,todos;SET check_function_bodies = false;---- Definition for function tf_create_do (OID = 24977) : --SET search_path = todos, pg_catalog;CREATE FUNCTION todos.tf_create_do ()RETURNS triggerAS $body$    DECLARE        -- local variables    BEGIN        -- id and timestamp new records        IF NEW.doID IS NULL        THEN NEW.doID := nextval('todos.seqdo');        END IF;        RETURN NEW;    END;$body$LANGUAGE plpgsql;---- Definition for function trf_create_do_do_0 (OID = 24979) : --CREATE FUNCTION todos.trf_create_do_do_0 ()RETURNS triggerAS $body$BEGIN  INSERT INTO todos.do_do (         doID,        relDoID,        drCode,        ddSort     )     VALUES (         new.doID,        1,        'CHILD',        new.doID     );    RETURN NEW;END;$body$LANGUAGE plpgsql;---- Definition for function trf_delete_do_dos (OID = 24980) : --CREATE FUNCTION todos.trf_delete_do_dos ()RETURNS triggerAS $body$BEGIN    DELETE      FROM todos.do_do     WHERE reldoid = old.doid;    DELETE      FROM todos.do_do     WHERE doid = old.doid;         RETURN old;END;$body$LANGUAGE plpgsql;---- Definition for function trf_create_post_do (OID = 24981) : --CREATE FUNCTION todos.trf_create_post_do ()RETURNS triggerAS $body$BEGIN    INSERT INTO todos.do (         dorecid,        dorecuuid,        dccode     )     SELECT              NEW.id,           NEW.uuid,           'DO'      FROM todos.do;    RETURN NEW;END;$body$LANGUAGE plpgsql;---- Definition for function tf_lane_do (OID = 25010) : --SET search_path = kanban, pg_catalog;CREATE FUNCTION kanban.tf_lane_do ()RETURNS triggerAS $body$BEGIN    INSERT INTO todos.do (         dorecid,        dccode     )     SELECT              NEW.laneID,           'DO'      FROM todos.do;    RETURN NEW;END;$body$LANGUAGE plpgsql;---- Definition for function tf_project_do (OID = 25012) : --CREATE FUNCTION kanban.tf_project_do ()RETURNS triggerAS $body$BEGIN    INSERT INTO todos.do (         dorecid,        dccode     )     SELECT              NEW.projectID,           'DO'      FROM todos.do;    RETURN NEW;END;$body$LANGUAGE plpgsql;---- Definition for function tf_lane_insert (OID = 25017) : --CREATE FUNCTION kanban.tf_lane_insert ()RETURNS triggerAS $body$    DECLARE        -- local variables    BEGIN        -- id and timestamp new records        IF NEW.laneID IS NULL        THEN NEW.laneID := nextval('kanban.seqmisc');        END IF;        RETURN NEW;    END;$body$LANGUAGE plpgsql;---- Definition for function tr_project_insert (OID = 25019) : --CREATE FUNCTION kanban.tr_project_insert ()RETURNS triggerAS $body$    DECLARE        -- local variables    BEGIN        -- id and timestamp new records        IF NEW.laneID IS NULL        THEN NEW.projectID := nextval('kanban.seqmisc');        END IF;        RETURN NEW;    END;$body$LANGUAGE plpgsql;---- Definition for function tf_create_todo (OID = 25032) : --CREATE FUNCTION kanban.tf_create_todo ()RETURNS triggerAS $body$    DECLARE        -- local variables    BEGIN        -- id and timestamp new records        IF NEW.todoID IS NULL        THEN NEW.todoID := nextval('kanban.seqtodo');        END IF;        RETURN NEW;    END;$body$LANGUAGE plpgsql;---- Structure for table do_class (OID = 24925) : --SET search_path = todos, pg_catalog;CREATE TABLE todos.do_class (    dccode varchar(10) NOT NULL,    dcname varchar(25),    dcdesc varchar(128),    dcdb varchar(25),    dctable varchar(25),    dc_pk_fld varchar(25),    dc_uuid_fld varchar(25))WITH (oids = false);---- Structure for table do (OID = 24930) : --CREATE TABLE todos."do" (    doid numeric(12,0) NOT NULL,    dccode varchar(10) DEFAULT 'DO'::character varying,    dorecid numeric(12,0),    dorecuuid varchar(36))WITH (oids = false);---- Structure for table do_relation (OID = 24941) : --CREATE TABLE todos.do_relation (    drcode varchar(10) NOT NULL,    drdesc varchar(128))WITH (oids = false);---- Structure for table do_do (OID = 24946) : --CREATE TABLE todos.do_do (    doid numeric(12,0) NOT NULL,    reldoid numeric(12,0) NOT NULL,    drcode varchar(10) DEFAULT 'PARENT'::character varying NOT NULL,    ddsort numeric(12,0),    ddleft numeric(12,0),    ddright numeric(12,0))WITH (oids = false);---- Definition for sequence seqdo (OID = 24973) : --CREATE SEQUENCE todos.seqdo    START WITH 10000    INCREMENT BY 1    NO MAXVALUE    NO MINVALUE    CACHE 1;---- Structure for table lane (OID = 24990) : --SET search_path = kanban, pg_catalog;CREATE TABLE kanban.lane (    laneid numeric(12,0) NOT NULL,    lanecode varchar(20) NOT NULL,    lnname varchar(40),    lndesc varchar(256))WITH (oids = false);---- Structure for table project (OID = 24998) : --CREATE TABLE kanban.project (    projectid numeric(12,0) NOT NULL,    projectcode varchar(20) NOT NULL,    prjname varchar(40),    prjdesc varchar(256),    projectstatuscode varchar(20),    prjbegin date,    prjend date,    prjuuid uuid)WITH (oids = false);---- Definition for sequence seqmisc (OID = 25015) : --CREATE SEQUENCE kanban.seqmisc    START WITH 10000    INCREMENT BY 1    NO MAXVALUE    NO MINVALUE    CACHE 1;---- Definition for sequence seqtodo (OID = 25029) : --CREATE SEQUENCE kanban.seqtodo    START WITH 10000    INCREMENT BY 1    NO MAXVALUE    NO MINVALUE    CACHE 1;---- Structure for table todo (OID = 25033) : --CREATE TABLE kanban.todo (    todoid numeric(12,0) NOT NULL,    tdname varchar(40) NOT NULL,    tddesc varchar(256),    tduuid uuid,    tdcomplete numeric(1,0))WITH (oids = false);---- Definition for index do_class_pkey (OID = 24928) : --SET search_path = todos, pg_catalog;ALTER TABLE ONLY do_class    ADD CONSTRAINT do_class_pkey    PRIMARY KEY (dccode);---- Definition for index do_pkey (OID = 24934) : --ALTER TABLE ONLY "do"    ADD CONSTRAINT do_pkey    PRIMARY KEY (doid);---- Definition for index do_dccode_fkey (OID = 24936) : --ALTER TABLE ONLY "do"    ADD CONSTRAINT do_dccode_fkey    FOREIGN KEY (dccode) REFERENCES do_class(dccode);---- Definition for index do_relation_pkey (OID = 24944) : --ALTER TABLE ONLY do_relation    ADD CONSTRAINT do_relation_pkey    PRIMARY KEY (drcode);---- Definition for index do_do_pkey (OID = 24950) : --ALTER TABLE ONLY do_do    ADD CONSTRAINT do_do_pkey    PRIMARY KEY (doid, reldoid, drcode);---- Definition for index do_do_doid_fkey (OID = 24952) : --ALTER TABLE ONLY do_do    ADD CONSTRAINT do_do_doid_fkey    FOREIGN KEY (doid) REFERENCES "do"(doid);---- Definition for index do_do_reldoid_fkey (OID = 24957) : --ALTER TABLE ONLY do_do    ADD CONSTRAINT do_do_reldoid_fkey    FOREIGN KEY (reldoid) REFERENCES "do"(doid);---- Definition for index do_do_drcode_fkey (OID = 24962) : --ALTER TABLE ONLY do_do    ADD CONSTRAINT do_do_drcode_fkey    FOREIGN KEY (drcode) REFERENCES do_relation(drcode);---- Definition for index lane_idx (OID = 25001) : --SET search_path = kanban, pg_catalog;ALTER TABLE ONLY lane    ADD CONSTRAINT lane_idx    PRIMARY KEY (laneid);---- Definition for index lane_idx1 (OID = 25003) : --ALTER TABLE ONLY lane    ADD CONSTRAINT lane_idx1    UNIQUE (lanecode);---- Definition for index project_pkey (OID = 25005) : --ALTER TABLE ONLY project    ADD CONSTRAINT project_pkey    PRIMARY KEY (projectid);---- Definition for index project_projectcode_key (OID = 25007) : --ALTER TABLE ONLY project    ADD CONSTRAINT project_projectcode_key    UNIQUE (projectcode);---- Definition for index todo_pkey (OID = 25036) : --ALTER TABLE ONLY todo    ADD CONSTRAINT todo_pkey    PRIMARY KEY (todoid);---- Definition for index todo_tdname_key (OID = 25038) : --ALTER TABLE ONLY todo    ADD CONSTRAINT todo_tdname_key    UNIQUE (tdname);---- Definition for trigger do_tr (OID = 24978) : --SET search_path = todos, pg_catalog;CREATE TRIGGER do_tr    BEFORE INSERT ON "do"    FOR EACH ROW    EXECUTE PROCEDURE tf_create_do ();---- Definition for trigger tr_do_after_insert (OID = 24983) : --CREATE TRIGGER tr_do_after_insert    AFTER INSERT ON "do"    FOR EACH ROW    EXECUTE PROCEDURE trf_create_do_do_0 ();---- Definition for trigger project_tr (OID = 25013) : --SET search_path = kanban, pg_catalog;CREATE TRIGGER project_tr    AFTER INSERT ON project    FOR EACH ROW    EXECUTE PROCEDURE tf_project_do ();---- Definition for trigger lane_tr (OID = 25014) : --CREATE TRIGGER lane_tr    AFTER INSERT ON lane    FOR EACH ROW    EXECUTE PROCEDURE tf_lane_do ();---- Definition for trigger lane_tr1 (OID = 25018) : --CREATE TRIGGER lane_tr1    BEFORE INSERT ON lane    FOR EACH ROW    EXECUTE PROCEDURE tf_lane_insert ();---- Definition for trigger project_tr1 (OID = 25020) : --CREATE TRIGGER project_tr1    BEFORE INSERT ON project    FOR EACH ROW    EXECUTE PROCEDURE tr_project_insert ();---- Definition for trigger tr_do_after_delete (OID = 25028) : --SET search_path = todos, pg_catalog;CREATE TRIGGER tr_do_after_delete    AFTER DELETE ON "do"    FOR EACH ROW    EXECUTE PROCEDURE trf_delete_do_dos ();---- Definition for trigger todo_tr (OID = 25040) : --SET search_path = kanban, pg_catalog;CREATE TRIGGER todo_tr    BEFORE INSERT ON todo    FOR EACH ROW    EXECUTE PROCEDURE tf_create_todo ();---- Comments--COMMENT ON SCHEMA public IS 'standard public schema';COMMENT ON COLUMN kanban.todo.tduuid IS 'UUID created by web front-end, generally speaking';